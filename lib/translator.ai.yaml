---
type: lib
version: 0.1.1
name: "Translator"
description: |-
  Translate the content or a file to the target language.
  It can be used in prompt. eg, `assistant: "Translation: @translator(file='document.md', target='English')"`

  Or, run it directly:

  ```bash
  # `no-chats` means do not save this into chat history
  $ai run --no-chats -f translator "{content:'我爱我的祖国和故乡.', target: 'English'}"
  ````
tag:
  - translate
  - translator
  - lib
# Below is the input/output configuration
input:       # the input items
  # Language of the content to be translated, default is "auto" for automatic detection
  - lang
  # The text file path if exists, it will load content from the file
  - file
  # the content to be translated
  - content
  # The terms
  - terms
  # Required, Target language
  - target: {required: true}
output:
  type: "object"
  properties:
    target_text:
      type: "string"
    source_text:
      type: "string"
    source_lang:
      type: "string"
    target_lang:
      type: "string"
  required: ["target_text", "source_text", "source_lang", "target_lang"]
# Set the default value for the content and target input
content: "I love my motherland and my hometown."
target: "Chinese"
completion_delimiter: "<|COMPLETE|>"
# Optional configuration
parameters:
  max_tokens: -1
  # Using the parameters below will enforce JSON output format, ensuring the ai always outputs correct JSON format.
  # response_format:
  #   type: "json"
# autoRunLLMIfPromptAvailable: false
---
# Below is the script content
- $if: "this.file"
  then:
    $set:
      content: "@file({{file}})"
- system: |-
    You are the best master of translation in the world.
- $if: "this.content"
  then:
    # For API mode.
    - $set:
        source: "?=content"
    - $if: "!this.lang || this.lang === 'auto'"
      then:
        $set:
          lang: "?=this.$detectLang(content.slice(0, 120))"
    - user: |-
        Think carefully. Output very high-quality translation result before the completion delimiter "{{completion_delimiter}}".
        {% if terms %}
        Translation according to terms:
        {{terms}}

        {% endif %}
        {%- if content.length > 100 -%}
        Translate the following content {% if lang %}from {{lang}} {% endif %}to {{target}}.
        ---
        {{content|trim}}
        {%- else -%}
        Translate the `"{{content|trim}}"` itself {% if lang %}from {{lang}} {% endif %}to {{target}}.
        {{content}}
        {%- endif -%}
    - --- # First dialogue start and this will hide the above messages from output
    - assistant: "[[trans]]" # Return the last instruction's result always. So no need to `$ret: "?=this.prompt.trans"`
    # - -> json(output=output, content='source_lang:'+lang +'\nsource_text:' + source + '\ntarget_lang:'+target + '\ntarget_text:' + content)
  else:
    # For multi-turn conversation in interactive mode.
    - ---
    - assistant: "I am the best translator in the world, what can I help you?"
